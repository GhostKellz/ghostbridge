syntax = "proto3";
package ghost.eth.v1;

import "common.proto";

service EthBridgeService {
  rpc GetBalance(EthBalanceQuery) returns (EthBalanceResponse);
  rpc GetTransaction(EthTransactionQuery) returns (EthTransactionResponse);
  rpc GetBlock(EthBlockQuery) returns (EthBlockResponse);
  rpc GetLatestBlock(ghost.common.v1.Empty) returns (EthBlockResponse);
  rpc SendTransaction(EthTransactionRequest) returns (EthTransactionResponse);
  rpc EstimateGas(EthGasEstimateRequest) returns (EthGasEstimateResponse);
  rpc GetContractCall(EthContractCallRequest) returns (EthContractCallResponse);
  rpc SubscribeBlocks(ghost.common.v1.Empty) returns (stream EthBlockResponse);
  rpc SubscribeTransactions(EthTransactionFilter) returns (stream EthTransactionResponse);
  rpc SubscribeContractEvents(EthEventFilter) returns (stream EthContractEvent);
  rpc ResolveDomain(EthDomainQuery) returns (EthDomainResponse);
}

message EthBalanceQuery {
  string address = 1;
  string block_number = 2; // "latest", "pending", or hex block number
  string chain_id = 3;
}

message EthBalanceResponse {
  string balance = 1; // in wei as string
  string block_number = 2;
  ghost.common.v1.Error error = 3;
}

message EthTransactionQuery {
  string transaction_hash = 1;
  string chain_id = 2;
}

message EthTransactionRequest {
  string from = 1;
  string to = 2;
  string value = 3; // in wei as string
  string gas_limit = 4;
  string gas_price = 5;
  string data = 6; // hex encoded
  string nonce = 7;
  string chain_id = 8;
}

message EthTransactionResponse {
  string transaction_hash = 1;
  string block_hash = 2;
  string block_number = 3;
  string transaction_index = 4;
  string from = 5;
  string to = 6;
  string value = 7;
  string gas_used = 8;
  string gas_price = 9;
  string status = 10; // "0x1" for success, "0x0" for failure
  string data = 11;
  repeated EthLog logs = 12;
  ghost.common.v1.Error error = 13;
}

message EthBlockQuery {
  oneof identifier {
    string block_number = 1; // "latest", "pending", or hex block number
    string block_hash = 2;
  }
  string chain_id = 3;
  bool include_transactions = 4;
}

message EthBlockResponse {
  string block_number = 1;
  string block_hash = 2;
  string parent_hash = 3;
  string timestamp = 4;
  string gas_limit = 5;
  string gas_used = 6;
  string miner = 7;
  repeated string transaction_hashes = 8;
  repeated EthTransactionResponse transactions = 9;
  ghost.common.v1.Error error = 10;
}

message EthGasEstimateRequest {
  string from = 1;
  string to = 2;
  string value = 3;
  string data = 4;
  string chain_id = 5;
}

message EthGasEstimateResponse {
  string gas_estimate = 1;
  ghost.common.v1.Error error = 2;
}

message EthContractCallRequest {
  string contract_address = 1;
  string function_signature = 2;
  repeated string parameters = 3;
  string block_number = 4;
  string chain_id = 5;
}

message EthContractCallResponse {
  string result = 1; // hex encoded result
  ghost.common.v1.Error error = 2;
}

message EthTransactionFilter {
  repeated string addresses = 1;
  repeated string topics = 2;
  string from_block = 3;
  string to_block = 4;
  string chain_id = 5;
}

message EthEventFilter {
  string contract_address = 1;
  repeated string topics = 2;
  string from_block = 3;
  string to_block = 4;
  string chain_id = 5;
}

message EthContractEvent {
  string transaction_hash = 1;
  string block_hash = 2;
  string block_number = 3;
  string transaction_index = 4;
  string log_index = 5;
  string contract_address = 6;
  repeated string topics = 7;
  string data = 8;
  ghost.common.v1.Error error = 9;
}

message EthLog {
  string transaction_hash = 1;
  string block_hash = 2;
  string block_number = 3;
  string transaction_index = 4;
  string log_index = 5;
  string address = 6;
  repeated string topics = 7;
  string data = 8;
}

message EthDomainQuery {
  string domain = 1; // e.g., "example.eth"
  string chain_id = 2;
}

message EthDomainResponse {
  string domain = 1;
  string resolved_address = 2;
  map<string, string> records = 3; // text records, avatar, etc.
  ghost.common.v1.Error error = 4;
}